{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class MapComponent {\n  constructor() {\n    this.zoom = 20;\n    // map: google.maps.Map = {\n    //   setCenter(this.center, );\n    // }\n    //\n    //   setCenter(latlng: google.maps.LatLng | google.maps.LatLngLiteral) {\n    // };\n    this.options = {\n      mapTypeId: 'hybrid',\n      zoomControl: true,\n      scrollwheel: true,\n      disableDoubleClickZoom: true,\n      maxZoom: 20,\n      minZoom: 8,\n      heading: 180\n    };\n    console.log(\"Constructor center:\", this.center);\n  }\n  ngAfterViewInit() {\n    // console.log(\"ngAfterViewInit center:\", this.center);\n    //const map = document.getElementById(\"map\");\n    this.map = new google.maps.Map(document.getElementById(\"map\"), {\n      mapTypeId: 'hybrid',\n      zoomControl: true,\n      scrollwheel: false,\n      disableDoubleClickZoom: true,\n      maxZoom: 20,\n      minZoom: 0,\n      heading: 180,\n      zoom: this.zoom,\n      center: this.center\n    });\n    this.marker = new google.maps.Marker({\n      position: {\n        lat: 46.76213,\n        lng: 7.63025\n      },\n      map: this.map,\n      title: \"Von hier wurde Fotografiert\",\n      draggable: true\n    });\n  }\n  ngOnChanges(changes) {\n    // Extract changes to the input property by its name\n    let change = changes['center'];\n    this.map.center = change.currentValue;\n    //this.map.refresh;\n    this.marker.center = change.currentValue;\n    //this.marker.refresh;\n    console.log(\"changed center=\", this.map.center);\n    // Whenever the data in the parent changes, this method gets triggered\n    // You can act on the changes here. You will have both the previous\n    // value and the  current value here.\n  }\n}\n\nMapComponent.ɵfac = function MapComponent_Factory(t) {\n  return new (t || MapComponent)();\n};\nMapComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: MapComponent,\n  selectors: [[\"app-map\"]],\n  inputs: {\n    center: \"center\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 1,\n  vars: 0,\n  consts: [[\"id\", \"map\"]],\n  template: function MapComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", 0);\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";AAOA,OAAM,MAAOA,YAAY;EAMvBC;IAJA,SAAI,GAAG,EAAE;IAkDT;IACA;IACA;IACA;IACA;IACA;IAEA,YAAO,GAA2B;MAChCC,SAAS,EAAE,QAAQ;MACnBC,WAAW,EAAE,IAAI;MACjBC,WAAW,EAAE,IAAI;MACjBC,sBAAsB,EAAE,IAAI;MAC5BC,OAAO,EAAE,EAAE;MACXC,OAAO,EAAE,CAAC;MACVC,OAAO,EAAE;KAEV;IA7DCC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAE,IAAI,CAACC,MAAM,CAAC;EACjD;EAEAC,eAAe;IACb;IACA;IACA,IAAI,CAACC,GAAG,GAAG,IAAIC,MAAM,CAACC,IAAI,CAACC,GAAG,CAC5BC,QAAQ,CAACC,cAAc,CAAC,KAAK,CAAgB,EAC7C;MACEhB,SAAS,EAAE,QAAQ;MACnBC,WAAW,EAAE,IAAI;MACjBC,WAAW,EAAE,KAAK;MAClBC,sBAAsB,EAAE,IAAI;MAC5BC,OAAO,EAAE,EAAE;MACXC,OAAO,EAAE,CAAC;MACVC,OAAO,EAAE,GAAG;MACZW,IAAI,EAAE,IAAI,CAACA,IAAI;MACfR,MAAM,EAAE,IAAI,CAACA;KACd,CACF;IACD,IAAI,CAACS,MAAM,GAAG,IAAIN,MAAM,CAACC,IAAI,CAACM,MAAM,CAAC;MACnCC,QAAQ,EAAE;QACRC,GAAG,EAAE,QAAQ;QACbC,GAAG,EAAE;OACN;MACDX,GAAG,EAAE,IAAI,CAACA,GAAG;MACbY,KAAK,EAAE,6BAA6B;MACpCC,SAAS,EAAE;KACZ,CAAC;EACJ;EAEAC,WAAW,CAACC,OAA6C;IACvD;IACA,IAAIC,MAAM,GAAiBD,OAAO,CAAC,QAAQ,CAAC;IAC5C,IAAI,CAACf,GAAG,CAACF,MAAM,GAAGkB,MAAM,CAACC,YAAY;IACrC;IACA,IAAI,CAACV,MAAM,CAACT,MAAM,GAAEkB,MAAM,CAACC,YAAY;IACvC;IACArB,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAE,IAAI,CAACG,GAAG,CAACF,MAAM,CAAC;IAE/C;IACA;IACA;EACF;;;AAlDWX,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;QAAZA,YAAY;EAAA+B;EAAAC;IAAArB;EAAA;EAAAsB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCPxBC,yBAAoB","names":["MapComponent","constructor","mapTypeId","zoomControl","scrollwheel","disableDoubleClickZoom","maxZoom","minZoom","heading","console","log","center","ngAfterViewInit","map","google","maps","Map","document","getElementById","zoom","marker","Marker","position","lat","lng","title","draggable","ngOnChanges","changes","change","currentValue","selectors","inputs","features","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["/Users/xander/git.FotoOL/FotoOL/src/app/map/map.component.ts","/Users/xander/git.FotoOL/FotoOL/src/app/map/map.component.html"],"sourcesContent":["import {Component, Input, AfterViewInit, SimpleChange} from '@angular/core';\n\n@Component({\n  selector: 'app-map',\n  templateUrl: './map.component.html',\n  styleUrls: ['./map.component.css']\n})\nexport class MapComponent implements AfterViewInit{\n  @Input() center: any;\n  zoom = 20;\n  map: any;\n  marker:any;\n\n  constructor() {\n    console.log(\"Constructor center:\", this.center);\n  }\n\n  ngAfterViewInit(): void {\n    // console.log(\"ngAfterViewInit center:\", this.center);\n    //const map = document.getElementById(\"map\");\n    this.map = new google.maps.Map(\n      document.getElementById(\"map\") as HTMLElement,\n      {\n        mapTypeId: 'hybrid',\n        zoomControl: true,\n        scrollwheel: false,\n        disableDoubleClickZoom: true,\n        maxZoom: 20,\n        minZoom: 0,\n        heading: 180,\n        zoom: this.zoom,\n        center: this.center\n      }\n    );\n    this.marker = new google.maps.Marker({\n      position: {\n        lat: 46.76213,\n        lng: 7.63025\n      },\n      map: this.map,\n      title: \"Von hier wurde Fotografiert\",\n      draggable: true\n    });\n  }\n\n  ngOnChanges(changes: { [property: string]: SimpleChange }) {\n    // Extract changes to the input property by its name\n    let change: SimpleChange = changes['center'];\n    this.map.center = change.currentValue;\n    //this.map.refresh;\n    this.marker.center =change.currentValue;\n    //this.marker.refresh;\n    console.log(\"changed center=\", this.map.center);\n\n    // Whenever the data in the parent changes, this method gets triggered\n    // You can act on the changes here. You will have both the previous\n    // value and the  current value here.\n  }\n\n  // map: google.maps.Map = {\n  //   setCenter(this.center, );\n  // }\n  //\n  //   setCenter(latlng: google.maps.LatLng | google.maps.LatLngLiteral) {\n  // };\n\n  options: google.maps.MapOptions = {\n    mapTypeId: 'hybrid',\n    zoomControl: true,\n    scrollwheel: true,\n    disableDoubleClickZoom: true,\n    maxZoom: 20,\n    minZoom: 8,\n    heading: 180,\n\n  };\n\n}\n"," <div id=\"map\"></div>\n\n\n<!--<google-map-->\n<!--  height=\"500px\"-->\n<!--  width=\"100%\"-->\n<!--  [zoom]=\"zoom\"-->\n<!--  [center]=\"center\"-->\n<!--  [options]=\"options\"-->\n<!--&gt;</google-map>-->\n<!--<google-map-marker-->\n<!--  [position]=\"center\",-->\n<!--  [title]=\"'hallo'\"-->\n<!--&gt;</google-map-marker>-->\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
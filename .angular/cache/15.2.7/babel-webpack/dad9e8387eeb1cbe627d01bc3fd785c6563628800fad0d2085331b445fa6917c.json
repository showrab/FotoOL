{"ast":null,"code":"import _asyncToGenerator from \"/Users/xander/git.FotoOL/FotoOL/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Subject } from 'rxjs';\n//import {getAllTags, getData, getTag} from \"exif-js\";\nimport * as EXIF from 'exifr';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nconst _c0 = [\"img\"];\nexport class AppComponent {\n  constructor() {\n    this.title = 'Foto Orientierungslauf 2023';\n    // Kamera\n    this.trigger = new Subject();\n    this.nextWebcam = new Subject();\n    this.sysImage = '';\n  }\n  ngAfterViewInit() {\n    this.getExif();\n  }\n  ngOnInit() {\n    //this.initCamera();\n    // navigator.geolocation.getCurrentPosition((position) => {\n    //   this.center = {\n    //     lat: position.coords.latitude,\n    //     lng: position.coords.longitude,\n    //     //lat: 46.76213,\n    //     //lng: 7.63025\n    //   };\n    // });\n    // this.video = document.getElementById(\"video\");\n    // this.canvas = document.getElementById(\"canvas\");\n  }\n  //\n  // initCamera() {\n  //   // Get the video element and canvas\n  //   navigator.mediaDevices.getUserMedia({ video: true }).then(function (stream) {\n  //     // @ts-ignore\n  //     video.srcObject = stream;\n  //     // @ts-ignore\n  //     video.play();\n  //   });\n  // }\n  takePicture() {\n    // // When the user clicks the \"Take Picture\" button, capture a still image from the video stream and upload it to the server\n    // // @ts-ignore\n    //   this.canvas.width = this.video.videoWidth;\n    //   // @ts-ignore\n    // this.canvas.height = this.video.videoHeight;\n    //   // @ts-ignore\n    // this.canvas.getContext(\"2d\").drawImage(video, 0, 0, canvas.width, canvas.height);\n    // // Convert the canvas image to a blob\n    // this.canvas.toBlob(function (blob) {\n    //   // Create a FormData object and append the blob to it\n    //   var formData = new FormData();\n    //   formData.append(\"picture\", blob);\n    //\n    //   // Send the FormData to the server using an AJAX request\n    //   var xhr = new XMLHttpRequest();\n    //   xhr.open(\"POST\", \"upload.php\");\n    //   xhr.send(formData);\n    //\n    //   // Display a message to the user\n    //   alert(\"Picture uploaded successfully!\");\n    //\n    //   // Stop the media stream\n    //   stream.getTracks().forEach(function (track) {\n    //     track.stop();\n    //   });\n    // }, \"image/png\");\n  }\n  initMap() {\n    // Initialize the map here\n    // this.googleMap = new google.maps.Map(document.getElementById(\"map\"), {\n    //   center: { lat: 46.76213, lng: 7.63025 },\n    //   zoom: 20,\n    // });\n  }\n  // Kamera\n  getSnapshot() {\n    this.trigger.next(void 0);\n    //this.getCoordinates();\n  }\n\n  captureImg(webcamImage) {\n    this.webcamImage = webcamImage;\n    this.sysImage = webcamImage.imageAsDataUrl;\n    console.info('got webcam image', this.sysImage);\n  }\n  get invokeObservable() {\n    return this.trigger.asObservable();\n  }\n  get nextWebcamObservable() {\n    return this.nextWebcam.asObservable();\n  }\n  //Exif\n  getExif() {\n    // const img1 = document.getElementById(\"img1\");\n    // // @ts-ignore\n    //   const make = EXIF.getTag(img1, \"Make\");\n    //   const model = EXIF.getTag(img1, \"Model\");\n    //   const makeAndModel = document.getElementById(\"makeAndModel\");\n    //   makeAndModel!.innerHTML = `${make} ${model}`;\n    //\n    // const img2 = document.getElementById(\"img2\");\n    // // @ts-ignore\n    //   const allMetaData = EXIF.getAllTags(img2);\n    //   const allMetaDataSpan = document.getElementById(\"allMetaDataSpan\");\n    //   allMetaDataSpan!.innerHTML = JSON.stringify(allMetaData, null, \"\\t\");\n  }\n  getExif2() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      let allMetaData;\n      let img1 = document.getElementById(\"img1\");\n      let {\n        latitude,\n        longitude\n      } = yield EXIF.gps('assets/images/lucas.jpeg');\n      _this.output = latitude;\n      console.log(latitude);\n    })();\n  }\n}\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)();\n};\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  viewQuery: function AppComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.imgEl = _t.first);\n    }\n  },\n  decls: 3,\n  vars: 1,\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\");\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(2, \"router-outlet\");\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate(ctx.title);\n    }\n  },\n  dependencies: [i1.RouterOutlet],\n  styles: [\".active[_ngcontent-%COMP%] {\\n  background: aqua;\\n}\\n\\n.crumbs[_ngcontent-%COMP%]   ol[_ngcontent-%COMP%] {\\n  list-style-type: none;\\n  padding-left: 0;\\n}\\n\\n.crumb[_ngcontent-%COMP%] {\\n  display: inline-block;\\n  padding-right: 5px;\\n}\\n\\n.crumb[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]::after {\\n  display: inline-block;\\n  color: #000;\\n  font-size: 80%;\\n  font-weight: bold;\\n  padding: 10px 3px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxxQkFBcUI7RUFDckIsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLHFCQUFxQjtFQUNyQixrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSxxQkFBcUI7RUFDckIsV0FBVztFQUNYLGNBQWM7RUFDZCxpQkFBaUI7RUFDakIsaUJBQWlCO0FBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiLmFjdGl2ZSB7XG4gIGJhY2tncm91bmQ6IGFxdWE7XG59XG5cbi5jcnVtYnMgb2wge1xuICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XG4gIHBhZGRpbmctbGVmdDogMDtcbn1cblxuLmNydW1iIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBwYWRkaW5nLXJpZ2h0OiA1cHg7XG59XG5cbi5jcnVtYiBhOjphZnRlciB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgY29sb3I6ICMwMDA7XG4gIGZvbnQtc2l6ZTogODAlO1xuICBmb250LXdlaWdodDogYm9sZDtcbiAgcGFkZGluZzogMTBweCAzcHg7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":";AACA,SAAqBA,OAAO,QAAQ,MAAM;AAE1C;AACA,OAAO,KAAKC,IAAI,MAAM,OAAO;;;;AAO7B,OAAM,MAAOC,YAAY;EALzBC;IAUE,UAAK,GAAG,6BAA6B;IAIrC;IACQ,YAAO,GAAiB,IAAIH,OAAO,EAAE;IAErC,eAAU,GAAiB,IAAIA,OAAO,EAAE;IAChD,aAAQ,GAAG,EAAE;;EAXbI,eAAe;IACb,IAAI,CAACC,OAAO,EAAE;EAChB;EAaAC,QAAQ;IAEN;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;EAAA;EAEF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAC,WAAW;IACT;IACA;IACA;IACA;IACA;IACA;IACA;IAEE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EAAA;EAIJC,OAAO;IACL;IACA;IACA;IACA;IACA;EAAA;EAKF;EACOC,WAAW;IAChB,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,KAAK,CAAC,CAAC;IACzB;EACF;;EACOC,UAAU,CAACC,WAAwB;IACxC,IAAI,CAACA,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,QAAQ,GAAGD,WAAY,CAACE,cAAc;IAC3CC,OAAO,CAACC,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAACH,QAAQ,CAAC;EACjD;EACA,IAAWI,gBAAgB;IACzB,OAAO,IAAI,CAACR,OAAO,CAACS,YAAY,EAAE;EACpC;EACA,IAAWC,oBAAoB;IAC7B,OAAO,IAAI,CAACC,UAAU,CAACF,YAAY,EAAE;EACvC;EAEA;EACAd,OAAO;IACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EAAA;EAIIiB,QAAQ;IAAA;IAAA;MACZ,IAAIC,WAAgB;MACpB,IAAIC,IAAI,GAAGC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC;MAC1C,IAAI;QAACC,QAAQ;QAAEC;MAAS,CAAC,SAAS3B,IAAI,CAAC4B,GAAG,CAAC,0BAA0B,CAAC;MACtE,KAAI,CAACC,MAAM,GAAGH,QAAQ;MACtBX,OAAO,CAACe,GAAG,CAACJ,QAAQ,CAAC;IAAC;EAExB;;AA7HWzB,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;QAAZA,YAAY;EAAA8B;EAAAC;IAAA;;;;;;;;;;;;MCXzBC,0BAAI;MAAAA,YAAS;MAAAA,iBAAK;MAOlBA,gCAA+B;;;MAP3BA,eAAS;MAATA,+BAAS","names":["Subject","EXIF","AppComponent","constructor","ngAfterViewInit","getExif","ngOnInit","takePicture","initMap","getSnapshot","trigger","next","captureImg","webcamImage","sysImage","imageAsDataUrl","console","info","invokeObservable","asObservable","nextWebcamObservable","nextWebcam","getExif2","allMetaData","img1","document","getElementById","latitude","longitude","gps","output","log","selectors","viewQuery","i0"],"sourceRoot":"","sources":["/Users/xander/git.FotoOL/FotoOL/src/app/app.component.ts","/Users/xander/git.FotoOL/FotoOL/src/app/app.component.html"],"sourcesContent":["import {Component, OnInit, AfterViewInit, ViewChild, ElementRef} from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { WebcamImage } from 'ngx-webcam';\n//import {getAllTags, getData, getTag} from \"exif-js\";\nimport * as EXIF from 'exifr';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit, AfterViewInit {\n  output: any;\n  ngAfterViewInit(): void {\n    this.getExif();\n  }\n  title = 'Foto Orientierungslauf 2023';\n\n\n\n  // Kamera\n  private trigger: Subject<any> = new Subject();\n  public webcamImage!: WebcamImage;\n  private nextWebcam: Subject<any> = new Subject();\n  sysImage = '';\n  private video: HTMLElement | null | undefined;\n  private canvas: HTMLElement | null | undefined;\n\n  ngOnInit() {\n\n    //this.initCamera();\n\n    // navigator.geolocation.getCurrentPosition((position) => {\n    //   this.center = {\n    //     lat: position.coords.latitude,\n    //     lng: position.coords.longitude,\n    //     //lat: 46.76213,\n    //     //lng: 7.63025\n    //   };\n    // });\n\n    // this.video = document.getElementById(\"video\");\n    // this.canvas = document.getElementById(\"canvas\");\n  }\n  //\n  // initCamera() {\n  //   // Get the video element and canvas\n  //   navigator.mediaDevices.getUserMedia({ video: true }).then(function (stream) {\n  //     // @ts-ignore\n  //     video.srcObject = stream;\n  //     // @ts-ignore\n  //     video.play();\n  //   });\n  // }\n  takePicture() {\n    // // When the user clicks the \"Take Picture\" button, capture a still image from the video stream and upload it to the server\n    // // @ts-ignore\n    //   this.canvas.width = this.video.videoWidth;\n    //   // @ts-ignore\n    // this.canvas.height = this.video.videoHeight;\n    //   // @ts-ignore\n    // this.canvas.getContext(\"2d\").drawImage(video, 0, 0, canvas.width, canvas.height);\n\n      // // Convert the canvas image to a blob\n      // this.canvas.toBlob(function (blob) {\n      //   // Create a FormData object and append the blob to it\n      //   var formData = new FormData();\n      //   formData.append(\"picture\", blob);\n      //\n      //   // Send the FormData to the server using an AJAX request\n      //   var xhr = new XMLHttpRequest();\n      //   xhr.open(\"POST\", \"upload.php\");\n      //   xhr.send(formData);\n      //\n      //   // Display a message to the user\n      //   alert(\"Picture uploaded successfully!\");\n      //\n      //   // Stop the media stream\n      //   stream.getTracks().forEach(function (track) {\n      //     track.stop();\n      //   });\n      // }, \"image/png\");\n\n  }\n\n  initMap() {\n    // Initialize the map here\n    // this.googleMap = new google.maps.Map(document.getElementById(\"map\"), {\n    //   center: { lat: 46.76213, lng: 7.63025 },\n    //   zoom: 20,\n    // });\n  }\n\n\n\n  // Kamera\n  public getSnapshot(): void {\n    this.trigger.next(void 0);\n    //this.getCoordinates();\n  }\n  public captureImg(webcamImage: WebcamImage): void {\n    this.webcamImage = webcamImage;\n    this.sysImage = webcamImage!.imageAsDataUrl;\n    console.info('got webcam image', this.sysImage);\n  }\n  public get invokeObservable(): Observable<any> {\n    return this.trigger.asObservable();\n  }\n  public get nextWebcamObservable(): Observable<any> {\n    return this.nextWebcam.asObservable();\n  }\n\n  //Exif\n  getExif() {\n    // const img1 = document.getElementById(\"img1\");\n    // // @ts-ignore\n    //   const make = EXIF.getTag(img1, \"Make\");\n    //   const model = EXIF.getTag(img1, \"Model\");\n    //   const makeAndModel = document.getElementById(\"makeAndModel\");\n    //   makeAndModel!.innerHTML = `${make} ${model}`;\n    //\n    // const img2 = document.getElementById(\"img2\");\n    // // @ts-ignore\n    //   const allMetaData = EXIF.getAllTags(img2);\n    //   const allMetaDataSpan = document.getElementById(\"allMetaDataSpan\");\n    //   allMetaDataSpan!.innerHTML = JSON.stringify(allMetaData, null, \"\\t\");\n  }\n  @ViewChild('img') imgEl: ElementRef | undefined;\n\n  async getExif2() {\n    let allMetaData: any;\n    let img1 = document.getElementById(\"img1\");\n    let {latitude, longitude} = await EXIF.gps('assets/images/lucas.jpeg');\n    this.output = latitude;\n    console.log(latitude);\n\n  }\n\n\n}\n","<h1>{{title}}</h1>\n<!--<nav class=\"crumbs\">-->\n<!--  <ol>-->\n<!--    <li class=\"crumb\"><a routerLink=\"/foto-ol\" routerLinkActive=\"active\" ariaCurrentWhenActive=\"page\">Foto-OL</a></li>-->\n<!--    <li class=\"crumb\"><a routerLink=\"/help\" routerLinkActive=\"active\" ariaCurrentWhenActive=\"page\">Hilfe</a></li>-->\n<!--  </ol>-->\n<!--</nav>-->\n<router-outlet></router-outlet>\n\n\n\n<!--<div class=\"container mt-5\">\n  <h2>Angular Webcam Capture Image from Camera</h2>\n  <div class=\"col-md-12\">\n    <webcam\n      [trigger]=\"invokeObservable\"\n      (imageCapture)=\"captureImg($event)\"\n    ></webcam>\n  </div>\n  <div class=\"col-md-12\">\n    <button class=\"btn btn-danger\" (click)=\"getSnapshot()\">\n      Capture Image\n    </button>\n  </div>\n  <div class=\"col-12\">\n    <div id=\"results\">Your taken image manifests here...</div>\n    <img [src]=\"webcamImage.imageAsDataUrl\" height=\"400px\" />\n  </div>\n</div>\n\n\n&lt;!&ndash;<img [src]=\"webcamImage.imageAsDataUrl\" id=\"img1\" />&ndash;&gt;\n<img #img src=\"assets/images/lucas.jpeg\" height=\"300\" id=\"img1\" />\n<pre>Make and model: <span id=\"makeAndModel\"></span></pre>\n\n<br/>\n\n<img src=\"assets/images/lucas.jpeg\" height=\"300\" id=\"img2\" />\n<pre id=\"allMetaDataSpan\"></pre>\n<br/>\n<button (click)=\"getExif2()\">exif</button>\n<div>{{output | json}}</div>-->\n\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}